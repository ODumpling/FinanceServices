/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.3.0 (NJsonSchema v10.4.4.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, {
  AxiosError,
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  CancelToken,
} from "axios";

export interface IClient {
  funds_ListFunds(
    pageNumber: number | undefined,
    pageSize: number | undefined
  ): Promise<FundsVm>;
  funds_CreateFund(command: CreateFundCommand): Promise<string>;
  funds_GetFund(
    id: string,
    page: number | undefined,
    pageSize: number | undefined
  ): Promise<FundVm>;
  transactions_CreateTransaction(
    command: CreateTransactionCommand
  ): Promise<string>;
  transactions_CreateTransactionSubscription(
    command: CreateTransactionSubscription
  ): Promise<FileResponse>;
  transactions_ListRecurringTransactions(
    id: string,
    page: number | undefined,
    pageSize: number | undefined
  ): Promise<RecurringTransactionsVm>;
  weatherForecast_Get(): Promise<WeatherForecast[]>;
}

export class Client implements IClient {
  private instance: AxiosInstance;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(baseUrl?: string, instance?: AxiosInstance) {
    this.instance = instance ? instance : axios.create();
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  funds_ListFunds(
    pageNumber: number | undefined,
    pageSize: number | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<FundsVm> {
    let url_ = this.baseUrl + "/api/Funds?";
    if (pageNumber === null)
      throw new Error("The parameter 'pageNumber' cannot be null.");
    else if (pageNumber !== undefined)
      url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processFunds_ListFunds(_response);
      });
  }

  protected processFunds_ListFunds(response: AxiosResponse): Promise<FundsVm> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FundsVm.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<FundsVm>(<any>null);
  }

  funds_CreateFund(
    command: CreateFundCommand,
    cancelToken?: CancelToken | undefined
  ): Promise<string> {
    let url_ = this.baseUrl + "/api/Funds";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(command);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processFunds_CreateFund(_response);
      });
  }

  protected processFunds_CreateFund(response: AxiosResponse): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<string>(<any>null);
  }

  funds_GetFund(
    id: string,
    page: number | undefined,
    pageSize: number | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<FundVm> {
    let url_ = this.baseUrl + "/api/Funds/{id}?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processFunds_GetFund(_response);
      });
  }

  protected processFunds_GetFund(response: AxiosResponse): Promise<FundVm> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = FundVm.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<FundVm>(<any>null);
  }

  transactions_CreateTransaction(
    command: CreateTransactionCommand,
    cancelToken?: CancelToken | undefined
  ): Promise<string> {
    let url_ = this.baseUrl + "/api/Transactions";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(command);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processTransactions_CreateTransaction(_response);
      });
  }

  protected processTransactions_CreateTransaction(
    response: AxiosResponse
  ): Promise<string> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = resultData200 !== undefined ? resultData200 : <any>null;
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<string>(<any>null);
  }

  transactions_CreateTransactionSubscription(
    command: CreateTransactionSubscription,
    cancelToken?: CancelToken | undefined
  ): Promise<FileResponse> {
    let url_ = this.baseUrl + "/api/Transactions/subscription";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(command);

    let options_ = <AxiosRequestConfig>{
      data: content_,
      responseType: "blob",
      method: "POST",
      url: url_,
      headers: {
        "Content-Type": "application/json",
        Accept: "application/octet-stream",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processTransactions_CreateTransactionSubscription(
          _response
        );
      });
  }

  protected processTransactions_CreateTransactionSubscription(
    response: AxiosResponse
  ): Promise<FileResponse> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers
        ? response.headers["content-disposition"]
        : undefined;
      const fileNameMatch = contentDisposition
        ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition)
        : undefined;
      const fileName =
        fileNameMatch && fileNameMatch.length > 1
          ? fileNameMatch[1]
          : undefined;
      return Promise.resolve({
        fileName: fileName,
        status: status,
        data: response.data as Blob,
        headers: _headers,
      });
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<FileResponse>(<any>null);
  }

  transactions_ListRecurringTransactions(
    id: string,
    page: number | undefined,
    pageSize: number | undefined,
    cancelToken?: CancelToken | undefined
  ): Promise<RecurringTransactionsVm> {
    let url_ = this.baseUrl + "/api/Transactions/subscriptions/{id}?";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (pageSize === null)
      throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
      url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processTransactions_ListRecurringTransactions(_response);
      });
  }

  protected processTransactions_ListRecurringTransactions(
    response: AxiosResponse
  ): Promise<RecurringTransactionsVm> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      result200 = RecurringTransactionsVm.fromJS(resultData200);
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<RecurringTransactionsVm>(<any>null);
  }

  weatherForecast_Get(
    cancelToken?: CancelToken | undefined
  ): Promise<WeatherForecast[]> {
    let url_ = this.baseUrl + "/api/WeatherForecast";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <AxiosRequestConfig>{
      method: "GET",
      url: url_,
      headers: {
        Accept: "application/json",
      },
      cancelToken,
    };

    return this.instance
      .request(options_)
      .catch((_error: any) => {
        if (isAxiosError(_error) && _error.response) {
          return _error.response;
        } else {
          throw _error;
        }
      })
      .then((_response: AxiosResponse) => {
        return this.processWeatherForecast_Get(_response);
      });
  }

  protected processWeatherForecast_Get(
    response: AxiosResponse
  ): Promise<WeatherForecast[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && typeof response.headers === "object") {
      for (let k in response.headers) {
        if (response.headers.hasOwnProperty(k)) {
          _headers[k] = response.headers[k];
        }
      }
    }
    if (status === 200) {
      const _responseText = response.data;
      let result200: any = null;
      let resultData200 = _responseText;
      if (Array.isArray(resultData200)) {
        result200 = [] as any;
        for (let item of resultData200)
          result200!.push(WeatherForecast.fromJS(item));
      } else {
        result200 = <any>null;
      }
      return result200;
    } else if (status !== 200 && status !== 204) {
      const _responseText = response.data;
      return throwException(
        "An unexpected server error occurred.",
        status,
        _responseText,
        _headers
      );
    }
    return Promise.resolve<WeatherForecast[]>(<any>null);
  }
}

export class FundsVm implements IFundsVm {
  funds?: PaginatedListOfFundDto | undefined;

  constructor(data?: IFundsVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
      this.funds =
        data.funds && !(<any>data.funds).toJSON
          ? new PaginatedListOfFundDto(data.funds)
          : <PaginatedListOfFundDto>this.funds;
    }
  }

  init(_data?: any) {
    if (_data) {
      this.funds = _data["funds"]
        ? PaginatedListOfFundDto.fromJS(_data["funds"])
        : <any>undefined;
    }
  }

  static fromJS(data: any): FundsVm {
    data = typeof data === "object" ? data : {};
    let result = new FundsVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["funds"] = this.funds ? this.funds.toJSON() : <any>undefined;
    return data;
  }
}

export interface IFundsVm {
  funds?: IPaginatedListOfFundDto | undefined;
}

export class PaginatedListOfFundDto implements IPaginatedListOfFundDto {
  items?: FundDto[] | undefined;
  pageIndex?: number;
  totalPages?: number;
  totalCount?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;

  constructor(data?: IPaginatedListOfFundDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
      if (data.items) {
        this.items = [];
        for (let i = 0; i < data.items.length; i++) {
          let item = data.items[i];
          this.items[i] =
            item && !(<any>item).toJSON ? new FundDto(item) : <FundDto>item;
        }
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"]) this.items!.push(FundDto.fromJS(item));
      }
      this.pageIndex = _data["pageIndex"];
      this.totalPages = _data["totalPages"];
      this.totalCount = _data["totalCount"];
      this.hasPreviousPage = _data["hasPreviousPage"];
      this.hasNextPage = _data["hasNextPage"];
    }
  }

  static fromJS(data: any): PaginatedListOfFundDto {
    data = typeof data === "object" ? data : {};
    let result = new PaginatedListOfFundDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    data["pageIndex"] = this.pageIndex;
    data["totalPages"] = this.totalPages;
    data["totalCount"] = this.totalCount;
    data["hasPreviousPage"] = this.hasPreviousPage;
    data["hasNextPage"] = this.hasNextPage;
    return data;
  }
}

export interface IPaginatedListOfFundDto {
  items?: IFundDto[] | undefined;
  pageIndex?: number;
  totalPages?: number;
  totalCount?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;
}

export class FundDto implements IFundDto {
  id?: string;
  name?: string | undefined;
  balance?: number;

  constructor(data?: IFundDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.balance = _data["balance"];
    }
  }

  static fromJS(data: any): FundDto {
    data = typeof data === "object" ? data : {};
    let result = new FundDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["balance"] = this.balance;
    return data;
  }
}

export interface IFundDto {
  id?: string;
  name?: string | undefined;
  balance?: number;
}

export class FundVm implements IFundVm {
  fund?: FundDto2 | undefined;
  transactions?: PaginatedListOfTransactionDto | undefined;
  transactionTypes?: TypeDto[] | undefined;

  constructor(data?: IFundVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
      this.fund =
        data.fund && !(<any>data.fund).toJSON
          ? new FundDto2(data.fund)
          : <FundDto2>this.fund;
      this.transactions =
        data.transactions && !(<any>data.transactions).toJSON
          ? new PaginatedListOfTransactionDto(data.transactions)
          : <PaginatedListOfTransactionDto>this.transactions;
      if (data.transactionTypes) {
        this.transactionTypes = [];
        for (let i = 0; i < data.transactionTypes.length; i++) {
          let item = data.transactionTypes[i];
          this.transactionTypes[i] =
            item && !(<any>item).toJSON ? new TypeDto(item) : <TypeDto>item;
        }
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.fund = _data["fund"]
        ? FundDto2.fromJS(_data["fund"])
        : <any>undefined;
      this.transactions = _data["transactions"]
        ? PaginatedListOfTransactionDto.fromJS(_data["transactions"])
        : <any>undefined;
      if (Array.isArray(_data["transactionTypes"])) {
        this.transactionTypes = [] as any;
        for (let item of _data["transactionTypes"])
          this.transactionTypes!.push(TypeDto.fromJS(item));
      }
    }
  }

  static fromJS(data: any): FundVm {
    data = typeof data === "object" ? data : {};
    let result = new FundVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["fund"] = this.fund ? this.fund.toJSON() : <any>undefined;
    data["transactions"] = this.transactions
      ? this.transactions.toJSON()
      : <any>undefined;
    if (Array.isArray(this.transactionTypes)) {
      data["transactionTypes"] = [];
      for (let item of this.transactionTypes)
        data["transactionTypes"].push(item.toJSON());
    }
    return data;
  }
}

export interface IFundVm {
  fund?: IFundDto2 | undefined;
  transactions?: IPaginatedListOfTransactionDto | undefined;
  transactionTypes?: ITypeDto[] | undefined;
}

export class FundDto2 implements IFundDto2 {
  id?: string;
  name?: string | undefined;
  expenses?: number;
  income?: number;
  balance?: number;

  constructor(data?: IFundDto2) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.name = _data["name"];
      this.expenses = _data["expenses"];
      this.income = _data["income"];
      this.balance = _data["balance"];
    }
  }

  static fromJS(data: any): FundDto2 {
    data = typeof data === "object" ? data : {};
    let result = new FundDto2();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["name"] = this.name;
    data["expenses"] = this.expenses;
    data["income"] = this.income;
    data["balance"] = this.balance;
    return data;
  }
}

export interface IFundDto2 {
  id?: string;
  name?: string | undefined;
  expenses?: number;
  income?: number;
  balance?: number;
}

export class PaginatedListOfTransactionDto
  implements IPaginatedListOfTransactionDto
{
  items?: TransactionDto[] | undefined;
  pageIndex?: number;
  totalPages?: number;
  totalCount?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;

  constructor(data?: IPaginatedListOfTransactionDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
      if (data.items) {
        this.items = [];
        for (let i = 0; i < data.items.length; i++) {
          let item = data.items[i];
          this.items[i] =
            item && !(<any>item).toJSON
              ? new TransactionDto(item)
              : <TransactionDto>item;
        }
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(TransactionDto.fromJS(item));
      }
      this.pageIndex = _data["pageIndex"];
      this.totalPages = _data["totalPages"];
      this.totalCount = _data["totalCount"];
      this.hasPreviousPage = _data["hasPreviousPage"];
      this.hasNextPage = _data["hasNextPage"];
    }
  }

  static fromJS(data: any): PaginatedListOfTransactionDto {
    data = typeof data === "object" ? data : {};
    let result = new PaginatedListOfTransactionDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    data["pageIndex"] = this.pageIndex;
    data["totalPages"] = this.totalPages;
    data["totalCount"] = this.totalCount;
    data["hasPreviousPage"] = this.hasPreviousPage;
    data["hasNextPage"] = this.hasNextPage;
    return data;
  }
}

export interface IPaginatedListOfTransactionDto {
  items?: ITransactionDto[] | undefined;
  pageIndex?: number;
  totalPages?: number;
  totalCount?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;
}

export class TransactionDto implements ITransactionDto {
  id?: string;
  type?: string | undefined;
  amount?: number;
  description?: string | undefined;
  date?: Date;

  constructor(data?: ITransactionDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.type = _data["type"];
      this.amount = _data["amount"];
      this.description = _data["description"];
      this.date = _data["date"]
        ? new Date(_data["date"].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): TransactionDto {
    data = typeof data === "object" ? data : {};
    let result = new TransactionDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["type"] = this.type;
    data["amount"] = this.amount;
    data["description"] = this.description;
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    return data;
  }
}

export interface ITransactionDto {
  id?: string;
  type?: string | undefined;
  amount?: number;
  description?: string | undefined;
  date?: Date;
}

export class TypeDto implements ITypeDto {
  value?: number;
  name?: string | undefined;

  constructor(data?: ITypeDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.value = _data["value"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): TypeDto {
    data = typeof data === "object" ? data : {};
    let result = new TypeDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["value"] = this.value;
    data["name"] = this.name;
    return data;
  }
}

export interface ITypeDto {
  value?: number;
  name?: string | undefined;
}

export class CreateFundCommand implements ICreateFundCommand {
  name?: string | undefined;

  constructor(data?: ICreateFundCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): CreateFundCommand {
    data = typeof data === "object" ? data : {};
    let result = new CreateFundCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["name"] = this.name;
    return data;
  }
}

export interface ICreateFundCommand {
  name?: string | undefined;
}

export class CreateTransactionCommand implements ICreateTransactionCommand {
  fundId?: string;
  amount?: number;
  type?: TransactionType;
  description?: string | undefined;
  date?: Date;

  constructor(data?: ICreateTransactionCommand) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.fundId = _data["fundId"];
      this.amount = _data["amount"];
      this.type = _data["type"];
      this.description = _data["description"];
      this.date = _data["date"]
        ? new Date(_data["date"].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): CreateTransactionCommand {
    data = typeof data === "object" ? data : {};
    let result = new CreateTransactionCommand();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["fundId"] = this.fundId;
    data["amount"] = this.amount;
    data["type"] = this.type;
    data["description"] = this.description;
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    return data;
  }
}

export interface ICreateTransactionCommand {
  fundId?: string;
  amount?: number;
  type?: TransactionType;
  description?: string | undefined;
  date?: Date;
}

export enum TransactionType {
  Expense = 0,
  Income = 1,
}

export class CreateTransactionSubscription
  implements ICreateTransactionSubscription
{
  id?: string;
  type?: string | undefined;

  constructor(data?: ICreateTransactionSubscription) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.type = _data["type"];
    }
  }

  static fromJS(data: any): CreateTransactionSubscription {
    data = typeof data === "object" ? data : {};
    let result = new CreateTransactionSubscription();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["type"] = this.type;
    return data;
  }
}

export interface ICreateTransactionSubscription {
  id?: string;
  type?: string | undefined;
}

export class RecurringTransactionsVm implements IRecurringTransactionsVm {
  transactions?: PaginatedListOfTransactionDto2 | undefined;

  constructor(data?: IRecurringTransactionsVm) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
      this.transactions =
        data.transactions && !(<any>data.transactions).toJSON
          ? new PaginatedListOfTransactionDto2(data.transactions)
          : <PaginatedListOfTransactionDto2>this.transactions;
    }
  }

  init(_data?: any) {
    if (_data) {
      this.transactions = _data["transactions"]
        ? PaginatedListOfTransactionDto2.fromJS(_data["transactions"])
        : <any>undefined;
    }
  }

  static fromJS(data: any): RecurringTransactionsVm {
    data = typeof data === "object" ? data : {};
    let result = new RecurringTransactionsVm();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["transactions"] = this.transactions
      ? this.transactions.toJSON()
      : <any>undefined;
    return data;
  }
}

export interface IRecurringTransactionsVm {
  transactions?: IPaginatedListOfTransactionDto2 | undefined;
}

export class PaginatedListOfTransactionDto2
  implements IPaginatedListOfTransactionDto2
{
  items?: TransactionDto2[] | undefined;
  pageIndex?: number;
  totalPages?: number;
  totalCount?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;

  constructor(data?: IPaginatedListOfTransactionDto2) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
      if (data.items) {
        this.items = [];
        for (let i = 0; i < data.items.length; i++) {
          let item = data.items[i];
          this.items[i] =
            item && !(<any>item).toJSON
              ? new TransactionDto2(item)
              : <TransactionDto2>item;
        }
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(TransactionDto2.fromJS(item));
      }
      this.pageIndex = _data["pageIndex"];
      this.totalPages = _data["totalPages"];
      this.totalCount = _data["totalCount"];
      this.hasPreviousPage = _data["hasPreviousPage"];
      this.hasNextPage = _data["hasNextPage"];
    }
  }

  static fromJS(data: any): PaginatedListOfTransactionDto2 {
    data = typeof data === "object" ? data : {};
    let result = new PaginatedListOfTransactionDto2();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items) data["items"].push(item.toJSON());
    }
    data["pageIndex"] = this.pageIndex;
    data["totalPages"] = this.totalPages;
    data["totalCount"] = this.totalCount;
    data["hasPreviousPage"] = this.hasPreviousPage;
    data["hasNextPage"] = this.hasNextPage;
    return data;
  }
}

export interface IPaginatedListOfTransactionDto2 {
  items?: ITransactionDto2[] | undefined;
  pageIndex?: number;
  totalPages?: number;
  totalCount?: number;
  hasPreviousPage?: boolean;
  hasNextPage?: boolean;
}

export class TransactionDto2 implements ITransactionDto2 {
  id?: string;
  fundId?: string;
  type?: string | undefined;
  amount?: number;
  description?: string | undefined;
  date?: Date;

  constructor(data?: ITransactionDto2) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.fundId = _data["fundId"];
      this.type = _data["type"];
      this.amount = _data["amount"];
      this.description = _data["description"];
      this.date = _data["date"]
        ? new Date(_data["date"].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): TransactionDto2 {
    data = typeof data === "object" ? data : {};
    let result = new TransactionDto2();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["id"] = this.id;
    data["fundId"] = this.fundId;
    data["type"] = this.type;
    data["amount"] = this.amount;
    data["description"] = this.description;
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    return data;
  }
}

export interface ITransactionDto2 {
  id?: string;
  fundId?: string;
  type?: string | undefined;
  amount?: number;
  description?: string | undefined;
  date?: Date;
}

export class WeatherForecast implements IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | undefined;

  constructor(data?: IWeatherForecast) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.date = _data["date"]
        ? new Date(_data["date"].toString())
        : <any>undefined;
      this.temperatureC = _data["temperatureC"];
      this.temperatureF = _data["temperatureF"];
      this.summary = _data["summary"];
    }
  }

  static fromJS(data: any): WeatherForecast {
    data = typeof data === "object" ? data : {};
    let result = new WeatherForecast();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["date"] = this.date ? this.date.toISOString() : <any>undefined;
    data["temperatureC"] = this.temperatureC;
    data["temperatureF"] = this.temperatureF;
    data["summary"] = this.summary;
    return data;
  }
}

export interface IWeatherForecast {
  date?: Date;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | undefined;
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isSwaggerException = true;

  static isSwaggerException(obj: any): obj is SwaggerException {
    return obj.isSwaggerException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
  return obj && obj.isAxiosError === true;
}
